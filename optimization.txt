Using old pandas locator syntax which worked

(exch) shinichi@ayanami ~/source/cryptocoins (master) $ python -m line_profiler plotter.py.lprof
Timer unit: 1e-06 s                                                                                                                                                                                                           
Total time: 24.2189 s                                                                                                                                                             
File: plotter.py                                                                         
Function: run at line 57                    
                                                                                                                                                                                  
Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    57                                               @profile
    58                                               def run(self):
    59      4452        23399      5.3      0.1          while self.i < len(self.df):
    60      4451      1688706    379.4      7.0              self.tenkan_highs.append(self.df.iloc[self.i]['high'])
    61      4451      1613053    362.4      6.7              self.tenkan_lows.append(self.df.iloc[self.i]['low'])
    62                                                                                   
    63      4451      1595802    358.5      6.6              self.kijun_highs.append(self.df.iloc[self.i]['high'])
    64      4451      1592896    357.9      6.6              self.kijun_lows.append(self.df.iloc[self.i]['low'])                                                                  
    65      4451        45130     10.1      0.2              tenkan = self.avg(self.tenkan_highs, self.tenkan_lows)                                                               
    66      4451        33958      7.6      0.1              kijun = self.avg(self.kijun_highs, self.kijun_lows)                                                                  
    67                                                                                   
    68      4451         5245      1.2      0.0              if tenkan and kijun:                                                                                                 
    69      4426         7407      1.7      0.0                  senkou_a = (tenkan + kijun) / 2                                                                                  
    70                                                       else:                                                                                                                
    71        25           22      0.9      0.0                  senkou_a = None
    72                                                                                   
    73      4451      1584702    356.0      6.5              self.senkou_b_highs.append(self.df.iloc[self.i]['high'])
    74      4451      1572342    353.3      6.5              self.senkou_b_lows.append(self.df.iloc[self.i]['low'])
    75
    76      4451        57079     12.8      0.2              senkou_b = self.avg(self.senkou_b_highs, self.senkou_b_lows)
    77
    78      4451      1572437    353.3      6.5              chikou = self.df.iloc[self.i]['close']
    79
    80      4451     12814071   2878.9     52.9              self.update_df(self.i, tenkan, kijun, chikou, senkou_a, senkou_b)
    81      4451        12664      2.8      0.1              self.i += 1


Using new pandas locator syntax which I found out while programming
(exch) shinichi@ayanami ~/source/cryptocoins (master) $ python -m line_profiler plotter.py.lprof
Timer unit: 1e-06 s

Total time: 13.6273 s
File: plotter.py
Function: run at line 57

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    57                                               @profile
    58                                               def run(self):
    59      4452        21843      4.9      0.2          while self.i < len(self.df):
    60      4451       211878     47.6      1.6              self.tenkan_highs.append(self.df.loc[self.i, 'high'])
    61      4451       181446     40.8      1.3              self.tenkan_lows.append(self.df.loc[self.i, 'low'])
    62
    63      4451       176894     39.7      1.3              self.kijun_highs.append(self.df.loc[self.i, 'high'])
    64      4451       173646     39.0      1.3              self.kijun_lows.append(self.df.loc[self.i, 'low'])
    65      4451        39507      8.9      0.3              tenkan = self.avg(self.tenkan_highs, self.tenkan_lows)
    66      4451        32528      7.3      0.2              kijun = self.avg(self.kijun_highs, self.kijun_lows)
    67
    68      4451         4828      1.1      0.0              if tenkan and kijun:
    69      4426         6743      1.5      0.0                  senkou_a = (tenkan + kijun) / 2
    70                                                       else:
    71        25           20      0.8      0.0                  senkou_a = None
    72
    73      4451       179169     40.3      1.3              self.senkou_b_highs.append(self.df.loc[self.i, 'high'])
    74      4451       173210     38.9      1.3              self.senkou_b_lows.append(self.df.loc[self.i, 'low'])
    75
    76      4451        48333     10.9      0.4              senkou_b = self.avg(self.senkou_b_highs, self.senkou_b_lows)
    77
    78      4451       174405     39.2      1.3              chikou = self.df.loc[self.i, 'close']
    79
    80      4451     12191214   2739.0     89.5              self.update_df(self.i, tenkan, kijun, chikou, senkou_a, senkou_b)
    81      4451        11645      2.6      0.1              self.i += 1


Now looking at update_df:
(exch) shinichi@ayanami ~/source/cryptocoins (master) $ python -m line_profiler plotter.py.lprof
Timer unit: 1e-06 s

Total time: 12.3465 s
File: plotter.py
Function: update_df at line 48

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    48                                               @profile
    49                                               def update_df(self, i, tenkan, kijun, chikou, senkou_a, senkou_b):
    50      4451      2480445    557.3     20.1          self.df_.loc[i, 'tenkan_sen'] = tenkan
    51      4451      2471540    555.3     20.0          self.df_.loc[i, 'kijun_sen'] = kijun
    52      4451         7945      1.8      0.1          if i - 26 >= 0:
    53      4425      2423690    547.7     19.6              self.df_.loc[i - 26, 'chikou_span'] = chikou
    54      4451      2493413    560.2     20.2          self.df_.loc[i + 26, 'senkou_a'] = senkou_a
    55      4451      2469508    554.8     20.0          self.df_.loc[i + 26, 'senkou_b'] = senkou_b


Trying to make calls at once time:
(exch) shinichi@ayanami ~/source/cryptocoins (master) $ python -m line_profiler plotter.py.lprof       
Timer unit: 1e-06 s

Total time: 10.419 s
File: plotter.py
Function: update_df at line 48

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    48                                               @profile
    49                                               def update_df(self, i, tenkan, kijun, chikou, senkou_a, senkou_b):
    50      4451      3971383    892.2     38.1          self.df_.loc[i, ['tenkan_sen', 'kijun_sen']] = (tenkan, kijun)
    51      4451         9148      2.1      0.1          if i - 26 >= 0:
    52      4425      2413261    545.4     23.2              self.df_.loc[i - 26, 'chikou_span'] = chikou
    53                                           
    54      4451      4025162    904.3     38.6          self.df_.loc[i + 26, ['senkou_a', 'senkou_b']] = (senkou_a, senkou_b)


Would changing the order help with memory access?
(exch) shinichi@ayanami ~/source/cryptocoins (master) $ python -m line_profiler plotter.py.lprof       
Timer unit: 1e-06 s

Total time: 10.5375 s
File: plotter.py
Function: update_df at line 48

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    48                                               @profile
    49                                               def update_df(self, i, tenkan, kijun, chikou, senkou_a, senkou_b):
    50      4451         8065      1.8      0.1          if i - 26 >= 0:
    51      4425      2431648    549.5     23.1              self.df_.loc[i - 26, 'chikou_span'] = chikou
    52                                           
    53      4451      4015109    902.1     38.1          self.df_.loc[i, ['tenkan_sen', 'kijun_sen']] = (tenkan, kijun)
    54      4451      4082644    917.2     38.7          self.df_.loc[i + 26, ['senkou_a', 'senkou_b']] = (senkou_a, senkou_b)


Try the same trick in main run():
(exch) shinichi@ayanami ~/source/cryptocoins (master) $ python -m line_profiler plotter.py.lprof       
Timer unit: 1e-06 s

Total time: 11.4191 s
File: plotter.py
Function: run at line 56

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    56                                               @profile
    57                                               def run(self):
    58      4452        23196      5.2      0.2          while self.i < len(self.df):
    59      4451       214728     48.2      1.9              hi = self.df.loc[self.i, 'high']
    60      4451       180045     40.5      1.6              lo = self.df.loc[self.i, 'low']
    61                                                       
    62      4451         8076      1.8      0.1              self.tenkan_highs.append(hi)
    63      4451         4969      1.1      0.0              self.tenkan_lows.append(lo)
    64                                           
    65      4451         4977      1.1      0.0              self.kijun_highs.append(hi)
    66      4451         5023      1.1      0.0              self.kijun_lows.append(lo)
    67      4451        38837      8.7      0.3              tenkan = self.avg(self.tenkan_highs, self.tenkan_lows)
    68      4451        32603      7.3      0.3              kijun = self.avg(self.kijun_highs, self.kijun_lows)
    69                                           
    70      4451         5150      1.2      0.0              if tenkan and kijun:
    71      4426         6859      1.5      0.1                  senkou_a = (tenkan + kijun) / 2
    72                                                       else:
    73        25           22      0.9      0.0                  senkou_a = None
    74                                           
    75      4451         6438      1.4      0.1              self.senkou_b_highs.append(hi)
    76      4451         5618      1.3      0.0              self.senkou_b_lows.append(lo)
    77                                           
    78      4451        40814      9.2      0.4              senkou_b = self.avg(self.senkou_b_highs, self.senkou_b_lows)
    79                                           
    80      4451       183023     41.1      1.6              chikou = self.df.loc[self.i, 'close']
    81                                           
    82      4451     10646342   2391.9     93.2              self.update_df(self.i, tenkan, kijun, chikou, senkou_a, senkou_b)
    83      4451        12346      2.8      0.1              self.i += 1

Looking at the plotting function:
(exch) shinichi@ayanami ~/source/cryptocoins (master) $ python -m line_profiler plotter.py.lprof 
Timer unit: 1e-06 s

Total time: 7.24634 s
File: plotter.py
Function: plot at line 134

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   134                                               @profile
   135                                               def plot(self):
   136                                                   # make it very clear which figure we're modifying
   137         6          588     98.0      0.0          plt.figure(self.fig.number)
   138                                           
   139                                                   # Converts raw matplotlib numbers to dates
   140         6       586029  97671.5      8.1          self.ax.clear()
   141         6           98     16.3      0.0          xfmt = md.DateFormatter('%Y-%m-%d %H:%M')
   142         6          157     26.2      0.0          self.ax.xaxis.set_major_formatter(xfmt)
   143         6         2847    474.5      0.0          self.ax.grid(color='#dddddd', linestyle='dashed', linewidth=1)
   144         6         1278    213.0      0.0          self.ax.set_title(filename)
   145         6          372     62.0      0.0          plt.xlabel("Time")
   146         6          300     50.0      0.0          plt.ylabel("Price")
   147         6      3944414 657402.3     54.4          candlestick_ohlc(self.ax, self.df.values, width=self.candle_width, colorup='g', colordown='r')
   148                                                   # Took me HOURS to figure out that I need list() otherwise ax.plot doesn't understand numpy.ndarray, and plots a vertical line
   149         6         1420    236.7      0.0          x = list(self.df['date'].values)
   150         6        26482   4413.7      0.4          self.ax.plot(x, self.df['tenkan_sen'].values, color=self.source.colours["tenkan_sen"], linewidth=0.7)
   151         6        27429   4571.5      0.4          self.ax.plot(x, self.df['kijun_sen'].values, color=self.source.colours["kijun_sen"], linewidth=0.7)
   152         6        25980   4330.0      0.4          self.ax.plot(x, self.df['chikou_span'].values, color=self.source.colours["chikou_span"], linewidth=0.7)
   153         6        25623   4270.5      0.4          self.ax.plot(x, self.df['senkou_a'].values, color=self.source.colours["senkou_a"], linewidth=0.3)
   154         6        27535   4589.2      0.4          self.ax.plot(x, self.df['senkou_b'].values, color=self.source.colours["senkou_b"], linewidth=0.3)
   155         6        64722  10787.0      0.9          self.ax.fill_between(x, self.df['senkou_a'].values, self.df['senkou_b'].values, where=self.df['senkou_a'].values>=self.df['senkou_b'].values, facecolor=(0, 1, 0, 0.1), interpolate=True)
   156         6        50259   8376.5      0.7          self.ax.fill_between(x, self.df['senkou_a'].values, self.df['senkou_b'].values, where=self.df['senkou_a'].values<=self.df['senkou_b'].values, facecolor=(1, 0, 0, 0.1), interpolate=True)
   157                                                   
   158         6        28324   4720.7      0.4          plt.legend()
   159         6          354     59.0      0.0          plt.gcf().canvas.mpl_connect('key_press_event', self.on_keyboard)
   160         6      2432125 405354.2     33.6          plt.gcf().canvas.draw()



How about the window function? Is making a copy slow?
(exch) shinichi@ayanami ~/source/cryptocoins (master) $ python -m line_profiler plotter.py.lprof       
Timer unit: 1e-06 s

Total time: 0.753417 s
File: plotter.py
Function: window at line 84

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    84                                               @profile
    85                                               def window(self, i1, i2):
    86                                                   # we include 26 extra rows from the future to plot the senkou
    87         7         7170   1024.3      1.0          window = self.df_.copy()[i1:i2+26]
    88                                           
    89                                                   # need to delete chikou_span data from the future and past 26 days
    90         7       411073  58724.7     54.6          window['chikou_span'].iloc[-52:] = np.nan
    91                                           
    92                                                   # we have 26 extra rows from the future with data we don't want to see.
    93                                                   # delete all future price data if they're not in columns senkou_a, senkou_b
    94         7       335154  47879.1     44.5          window.loc[i2:, window.columns.difference(['date', 'senkou_a', 'senkou_b'])] = np.nan
    95         7           20      2.9      0.0          return window


Hmm changing how you delete the chikou-span data doesn’t do much for the line’s speed, but makes the next line faster:
(exch) shinichi@ayanami ~/source/cryptocoins (master) $ python -m line_profiler plotter.py.lprof       
Timer unit: 1e-06 s

Total time: 0.434522 s
File: plotter.py
Function: window at line 84

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    84                                               @profile
    85                                               def window(self, i1, i2):
    86                                                   # we include 26 extra rows from the future to plot the senkou
    87         7         7076   1010.9      1.6          window = self.df_.copy()[i1:i2+26]
    88                                           
    89                                                   # need to delete chikou_span data from the future and past 26 days
    90         7       412987  58998.1     95.0          window.loc[i2-26:, 'chikou_span'] = np.nan
    91                                           
    92                                                   # we have 26 extra rows from the future with data we don't want to see.
    93                                                   # delete all future price data if they're not in columns senkou_a, senkou_b
    94         7        14450   2064.3      3.3          window.loc[i2:, window.columns.difference(['date', 'senkou_a', 'senkou_b'])] = np.nan
    95         7            9      1.3      0.0          return window
